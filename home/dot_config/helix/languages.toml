[[language]]
name = "toml"
formatter = { command = "taplo", args = ["format", "-"] }
auto-format = true

[[language]]
name = "python"
language-servers = ["pylsp", "ruff"]
formatter = { command = "ruff", args = ["format", "-n", "-"] }
auto-format = true

[language-server.ruff]
command = "ruff"
args = ["server", "--preview"]
config = { settings = { organizeImports = true, lint.run = "onSave" } }

[[language]]
name = "lua"
language-servers = [
  { name = "lua-language-server", except-features = ["format"] },
  { name = "efm", only-features = ["diagnostics", "code-action"] }, # for selene
]
formatter = { command = "stylua", args = ["-"] }
auto-format = true

[language-server.lua-language-server.config.Lua]
format.enable = false
runtime.version = "LuaJIT"
diagnostics.globals = ["vim"]
workspace.library = [
  "/usr/share/nvim/runtime/lua",
  "/usr/share/nvim/runtime/lua/vim",
  "/usr/share/nvim/runtime/lua/vim/lsp",
]

[[language]]
name = "zig"
auto-format = true

[language-server.zls.config]
enable_build_on_save = true
build_on_save_args = ["check", "-fincremental", "--watch"]
force_autofix = true
warn_style = true
highlight_global_var_declarations = true

[[language]]
name = "rust"
auto-format = true

[language-server.rust-analyzer.config]
check.command = "clippy"
check.features = "all"
completion.fullFunctionSignatures.enable = true
diagnostics.experimental.enable = true
diagnostics.styleLints.enable = true
hover.actions.references.enable = true
hover.memoryLayout.niche = true
inlayHints.bindingModeHints.enable = true
inlayHints.closingBraceHints.minLines = 1
inlayHints.closureCaptureHints.enable = true
inlayHints.closureReturnTypeHints.enable = "always"           # with_block
inlayHints.closureStyle = "rust_analyzer"                     # impl_fn | with_id
inlayHints.discriminantHints.enable = "always"                # fieldless
inlayHints.expressionAdjustmentHints.enable = "reborrow"
inlayHints.genericParameterHints.lifetime.enable = true
inlayHints.genericParameterHints.type.enable = true
inlayHints.implicitDrops.enable = false
inlayHints.lifetimeElisionHints.enable = "always"             # skip_trivial
inlayHints.lifetimeElisionHints.useParameterNames = true
inlayHints.rangeExclusiveHints.enable = true
interpret.tests = true
lens.references.adt.enable = true
lens.references.enumVariant.enable = true
lens.references.method.enable = true
lens.references.trait.enable = true
semanticHighlighting.operator.specialization.enable = true
semanticHighlighting.punctuation.separate.macro.bang = true
semanticHighlighting.punctuation.specialization.enable = true
typing.autoClosingAngleBrackets.enable = true

[[language]]
name = "yaml"
file-types = ["yml", "yaml", { glob = "phpstan.neon" }]

[[language]]
name = "git-config"
file-types = [
  { glob = "git/config" },
  { glob = ".gitmodules" },
  { glob = ".gitconfig" },
  { glob = ".git/config" },
  { glob = ".config/git/config" },
]

[language-server.clangd]
command = "clangd"
args = ["--clang-tidy", "-j=5", "--malloc-trim"]

[[language]]
name = "c"
language-servers = [
  "clangd",
  { name = "efm", only-features = [
    "diagnostics",
  ] }, # gcc, clang-analyzer and cppcheck lints
]
file-types = ["c", "h"]
auto-format = true

# shellcheck and shfmt is integrated into bash-language-server
[[language]]
name = "cpp"
language-servers = [
  "clangd",
  { name = "efm", only-features = [
    "diagnostics",
  ] }, # clang-analyzer and cppcheck lints
]
file-types = [
  "cc",
  "ccm",
  "cxx",
  "cxxm",
  "c++",
  "c++m",
  "cpp",
  "cppm",
  "hxx",
  "hpp",
]
auto-format = true

[[language]]
name = "bash"
auto-format = true

[[language]]
name = "pkgbuild"
language-servers = [
  "pkgbuild-language-server",
  { name = "bash-language-server", except-features = [
    # "diagnostics",
  ] },
]
auto-format = true

[language-server.tailwindcss-lsp]
command = "tailwindcss-language-server"
args = ["--stdio"]

[language-server.tailwindcss-lsp.config]
includeLanguages = { tailwindcss = "css" }

[[language]]
name = "json"
language-servers = [
  { name = "vscode-json-language-server", except-features = [
    "format",
  ] },
  "biome",
]
auto-format = true

[[language]]
name = "jsonc"
language-servers = [
  { name = "vscode-json-language-server", except-features = [
    "format",
  ] },
  "biome",
]
auto-format = true
